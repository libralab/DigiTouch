package {	import flash.display.*;	import flash.display.LoaderInfo;	import flash.xml.*;	import flash.events.Event;	import br.com.stimuli.loading.BulkLoader;	import br.com.stimuli.loading.BulkProgressEvent;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.events.MouseEvent;	import gs.TweenLite;	import flash.net.*;	public class BottomBanners extends MovieClip	{		private var xml:XML;		private var MCs:Array;		private var activeMCs:Array;		private var srcArray:Array;		public static var imgLoader:BulkLoader;		public var switchOn:Boolean;		private var tempLength:int = 0;		private var stageWidth;		//private var instance:BottomBanners;		public function BottomBanners (xmlNode:XML)		{			stageWidth = 950;			xml = xmlNode;			MCs = new Array  ;			activeMCs = new Array  ;			srcArray = new Array  ;			if (imgLoader == null)			{				imgLoader = new BulkLoader("bottomBanners");			}			switchOn = true;			////trace(imgLoader.itemsLoaded);			////trace(imgLoader);			loadBanners ();		}		//static public function getInstance(xmlNode:XML):BottomBanners		//{		//if (instance == null)		//{		//instance = new BottomBanners(xmlNode);		//}		//return instance;		//}		private function loadBanners ():void		{			var folder:String;			folder = xml.banerdolny.attribute("folder");			var bannerList:XMLList = xml.banerdolny.element;			//if (images == null)			//{			//images = new Array[bannerList.length()];			////trace(bannerList.length());			//}			////trace(xml.banerdolny.element.attribute("id"));			for each (var elementList:XML in bannerList)			{				var id:String;				var src:String;				var url:String;				id = elementList.attribute("id");				src = elementList.attribute("src");				url = elementList.attribute("url");				srcArray[id] = url;				////trace("a");				//				imgLoader.add (folder + src, {id:id});				imgLoader.get(id).addEventListener (Event.COMPLETE, onImgLoaded);				imgLoader.start ();				//var mc:MovieClip = new MovieClip(groupId,groupFolder,groupXML,xmlData);				//mc.x = 1000;				//activeButtons(mc);				////activeButtons(mc);				//				//addChild(mc);				//MCs.push(mc );				//				////trace(MCs.x);			}		}		private function onImgLoaded (e:Event)		{			////trace(imgLoader);			if (imgLoader.itemsTotal == imgLoader.itemsLoaded)			{				////trace(imgLoader);				if (MCs.length < imgLoader.itemsTotal)				{					for (var i:int = 0; i<imgLoader.itemsTotal; i++)					{						var img:Bitmap = new Bitmap(Bitmap(imgLoader.getBitmap(String(i + 1))).bitmapData);						var mc:MCButton = new MCButton  ;						if (srcArray[i + 1] != "")						{							mc.adress = srcArray[i + 1];							mc.buttonMode = true;							mc.addEventListener (MouseEvent.CLICK, clickOn);							//mc.addEventListener(MouseEvent.CLICK, navigateToURL(new URLRequest(srcArray[i + 1]), "_blank"));						}						//mc.length = img.length;						mc.addChild (img);						MCs.push (mc);						//addChild(mc);					}				}				////trace(MCs.length);				this.addEventListener (Event.ENTER_FRAME, animator);				//if (activeMCs.length == 0)				while ( tempLength < 950 )				{					////trace(tempLength);					var mc3:MovieClip = MCs.shift();					mc3.x = tempLength - 10;					////trace(mc3.x);					tempLength += mc3.width + 10;					this.addChild (mc3);					activeMCs.push (mc3);				}			}		}		//pop():*		//Usuwa ostatni element tablicy i zwraca jego wartość.		//Array		//  		//push(... args):uint		//Dodaje na końcu tablicy co najmniej jeden element i zwraca nową długość tablicy.		//		//shift():*		//Usuwa pierwszy element tablicy i zwraca jego wartość.		//		//unshift(... args):uint		//Dodaje na początku tablicy co najmniej jeden element i zwraca nową długość tablicy.		private function clickOn (e:MouseEvent):void		{			var url:String=e.currentTarget.adress;			var request:URLRequest=new URLRequest(url);			try			{				navigateToURL (request, "_self");			}			catch (e:Error)			{				trace ("Wystąpił błąd!");			}		}		private function animator (event:Event)		{			if (switchOn)			{				//trace(activeMCs[0].x);				//trace(activeMCs[activeMCs.length-1].x);				//dodawanie nowych elementow				if (activeMCs[activeMCs.length-1].x == 930 && activeMCs.length > 0)				{ 					var mc2:MovieClip = MCs.pop();					mc2.x = 950 + activeMCs[activeMCs.length-1].width;										this.addChild (mc2);					activeMCs.push (mc2);					//trace(activeMCs[activeMCs.length-1].x);					//trace(activeMCs.length);					////trace("111:    " + activeMCs[activeMCs.length-1].x);				}				for (var k:int = 0; k < activeMCs.length; k++)				{					activeMCs[k].x -= 1;				}				//usuwanie niewidocznych juz elementow				if (activeMCs[0].x < -activeMCs[0].width -20)				{					//trace(activeMCs[activeMCs.length-1].x)					removeChild (activeMCs[0]);					MCs.push (activeMCs.shift());				}			}						//przesuwanie z lewej do prawej//			if (switchOn)//			{//				//trace(activeMCs[0].x);//				if (activeMCs[0].x == -5 && activeMCs.length > 0)//				{//					////trace("222: " + MCs.length);//					var mc2:MovieClip = MCs.pop();//					mc2.x = -20 - mc2.width;//					this.addChild (mc2);//					activeMCs.unshift (mc2);//					////trace("111:    " + activeMCs[activeMCs.length-1].x);//				}////				for (var k:int = 0; k < activeMCs.length; k++)//				{//					activeMCs[k].x -= 1;//				}////				if (activeMCs[activeMCs.length-1].x > 950 && this.contains(activeMCs[activeMCs.length-1]))//				{//					//trace(activeMCs[activeMCs.length-1].x)//					removeChild (activeMCs[activeMCs.length-1]);//					MCs.push (activeMCs.pop());//////				}//			}								}	}}